services:
    app:
        build:
            context: .
        restart: always
        volumes:
            - static-data:/vol/web
        environment:
            - DB_HOST=db
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASS=${DB_PASS}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - SECRET_KEY=${DJANGO_SECRET_KEY}
            - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy

    celery:
        build:
            context: .
        restart: always
        command: celery -A udn_nba worker --loglevel=info
        environment:
            - DB_HOST=db
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASS=${DB_PASS}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - SECRET_KEY=${DJANGO_SECRET_KEY}
            - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
        depends_on:
            app:
                condition: service_started
            db:
                condition: service_healthy
            redis:
                condition: service_healthy

    celery-beat:
        build:
            context: .
        restart: always
        command: celery -A udn_nba beat --loglevel=info
        environment:
            - DB_HOST=db
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASS=${DB_PASS}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - SECRET_KEY=${DJANGO_SECRET_KEY}
            - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
        depends_on:
            app:
                condition: service_started
            db:
                condition: service_healthy
            redis:
                condition: service_healthy

    db:
        image: postgres:13-alpine
        restart: always
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASS}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
            interval: 5s
            timeout: 5s
            retries: 5

    redis:
        image: redis:7.0-alpine
        restart: always
        volumes:
            - redis-data:/data
        command: redis-server --save 60 1 --loglevel warning
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5

    proxy:
        build:
            context: ./proxy
        restart: always
        depends_on:
            - app
        ports:
            - 80:8000
        volumes:
            - static-data:/vol/static

volumes:
    postgres-data:
    static-data:
    redis-data:
